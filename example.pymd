import pymd
# # PyMD: Python-Executable Markdown
#
# Welcome to PyMD! This document demonstrates the powerful combination of markdown-style syntax with Python code execution.
#
# ## Key Features
#
# - **Markdown Syntax**: Use familiar markdown prefixed with `#`
# - **Python Execution**: Run Python code inside ``` blocks
# - **Variable Persistence**: Variables persist across code blocks
# - **Beautiful Output**: Clean, responsive HTML rendering
# - **Executable Files**: Run directly as Python with `python filename.pymd`
#
# Let's explore these features with live examples!
#
# ## Basic Python Execution
#
# ```
# Define some variables
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter
import datetime
import numpy as np
import pandas as pd
name = "PyMD"
version = "0.1.6"
year = "2025"

print(f"## Welcome to **{name}** v{version}!")
print(f"Created in {year}")
# ```
#
# The variables we just defined are available in subsequent code blocks:
#
# ```
print(f"Confirming: We're using **{name}** version **{version}**")

# Let's do some calculations
numbers = [1, 2, 3, 4, 5]
total = sum(numbers)
average = total / len(numbers)

print(f"Numbers: {numbers}")
print(f"Sum: **{total}**")
print(f"Average: **{average}**")
# ```
#
# ## Data Analysis with Pandas
#
# ```

# Create sample sales data
np.random.seed(42)
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
products = ['Widget A', 'Widget B', 'Widget C']

data = []
for product in products:
    for month in months:
        sales = np.random.randint(50, 200)
        data.append({'Product': product, 'Month': month, 'Sales': sales})

df = pd.DataFrame(data)
print("**Sample Sales Data:**")
print(df.head(10).to_markdown())
# ```
#
# Let's analyze this data:
#
# ```
# Calculate total sales by product
product_totals = df.groupby(
    'Product')['Sales'].sum().sort_values(ascending=False)
print("**Total Sales by Product:**")
for product, sales in product_totals.items():
    print(f"  {product}: **${sales:,}**")

print(f"**Best performing product:** {product_totals.index[0]}")
print(f"**Total sales across all products:** ${product_totals.sum():,}")
# ```
#
# ## Interactive Input with Mock Values
#
# PyMD supports interactive input through a mock system for non-interactive document execution:
#
# ```
# Interactive input with mock values
user_name = input("What's your name? ")  # input: Alice
user_age = input("How old are you? ")  # input: 28

print(f"### User Profile: {user_name}")
print(f"**Name:** {user_name}")
print(f"**Age:** {user_age}")

# Calculate birth year
birth_year = 2025 - int(user_age)
print(f"**Estimated birth year:** {birth_year}")
# ```
#
# Input without mock values defaults to empty string:
#
# ```
# Input without mock value (defaults to empty)
optional_comment = input("Any comments? ")

if optional_comment:
    print(f"**Comment:** {optional_comment}")
else:
    print("**No comment provided** (empty mock value)")
# ```
#
# ## Interactive Development
#
# ```
# Real-time updates
current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
print(f"Document last executed: **{current_time}**")

# You can modify this code and see results update immediately
message = "Try changing this message and saving the file!"
print(f"**Message:** {message}")
# ```
#
# ## Image Support
#
# ```
# Image rendering API demonstration
print("You can use the `pymd.image()` or directly use `plt.show()` function to render images:")

# Create a simple plot
plt.figure(figsize=(6, 4))
plt.plot(np.array([np.sin(i / 100) + (np.random.randn()) / 100
         for i in range(628)]))
plt.title('Random Data Plot')
plt.xlabel('Index')
plt.ylabel('Value')
plt.grid(True)
plt.show()
# ```
#
# ## Video Support
#
# PyMD now supports video rendering with the new `pymd.video()` function:
#
# ```
# Video rendering API demonstration
print("## Video Rendering Features")
print("PyMD now supports embedded videos with customizable options:")

# Example API calls (would work with real video files):
print("### Basic Video Usage")
code = """# Use matplotlib to create a video of sin wave
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter

# Parameters
fps = 30          # frames per second
seconds = 6       # total duration
frames = fps * seconds
x = np.linspace(0, 2*np.pi, 1000)

# Single chart (no subplots), no explicit colors
fig, ax = plt.subplots(figsize=(6, 3.5))
ax.set_xlim(x.min(), x.max())
ax.set_ylim(-1.2, 1.2)
ax.set_xlabel("x")
ax.set_ylabel("sin(x + phase)")
ax.set_title("Animated Sine Wave")

(line,) = ax.plot([], [])  # line to update

def init():
    line.set_data([], [])
    return (line,)

def update(frame):
    phase = 2*np.pi * frame / frames * 2.0   # two full phase cycles over the animation
    y = np.sin(x + phase)
    line.set_data(x, y)
    return (line,)

anim = FuncAnimation(fig, update, init_func=init, frames=frames, interval=1000/fps, blit=True)

# Save as GIF (no ffmpeg required)
anim.save("videos/sine_wave.gif", writer=PillowWriter(fps=fps))
pymd.video("videos/sine_wave.gif", "Animated Sine Wave")
"""

pymd.code(code, language='python')


# Parameters
fps = 30          # frames per second
seconds = 6       # total duration
frames = fps * seconds
x = np.linspace(0, 2*np.pi, 1000)

# Single chart (no subplots), no explicit colors
fig, ax = plt.subplots(figsize=(6, 3.5))
ax.set_xlim(x.min(), x.max())
ax.set_ylim(-1.2, 1.2)
ax.set_xlabel("x")
ax.set_ylabel("sin(x + phase)")
ax.set_title("Animated Sine Wave")

(line,) = ax.plot([], [])  # line to update


def init():
    line.set_data([], [])
    return (line,)


def update(frame):
    # two full phase cycles over the animation
    phase = 2*np.pi * frame / frames * 2.0
    y = np.sin(x + phase)
    line.set_data(x, y)
    return (line,)


anim = FuncAnimation(fig, update, init_func=init,
                     frames=frames, interval=1000/fps, blit=True)

# Save as GIF (no ffmpeg required)
anim.save("videos/sine_wave.gif", writer=PillowWriter(fps=fps))
pymd.video("videos/sine_wave.gif", "Animated Sine Wave")
# ```
#
# ### Video API Reference
#
# The `pymd.video()` function supports these parameters:
#
# | Parameter | Type | Default | Description |
# |-----------|------|---------|-------------|
# | video_path | str | required | Path to video file |
# | caption | str | '' | Optional caption |
# | width | str | '100%' | Video width (CSS) |
# | height | str | 'auto' | Video height (CSS) |
# | controls | bool | True | Show video controls |
# | autoplay | bool | False | Auto-play on load |
# | loop | bool | False | Loop playback |
#
# ```
# Demonstrate video file organization
print("### Video File Management")
print("Videos are automatically organized in your output:")
video_output_structure = """output/
â”œâ”€â”€ videos/
â”‚   â”œâ”€â”€ video_1_abc123.mp4
â”‚   â”œâ”€â”€ video_2_def456.mp4
â”‚   â””â”€â”€ ...
â”œâ”€â”€ images/
â”‚   â””â”€â”€ (existing plots)
â””â”€â”€ output.html
"""

pymd.code(video_output_structure)

print("**Key Features:**")
print("- Automatic video file copying to output directory")
print("- Support for MP4, WebM, and OGG formats")
print("- HTML5 video tags with fallback sources")
print("- Responsive styling with rounded corners")
print("- Error handling for missing files")
# ```
#
# ## Conclusion
#
# This example demonstrates PyMD's powerful features:
#
# 1. **Executable Files**: Can be run directly with `python example.pymd`
# 2. **Clean Syntax**: Markdown-style headers, lists, and text prefixed with `#`
# 3. **Code Execution**: Python code runs and print output becomes markdown
# 4. **Variable Persistence**: Data flows between code blocks
# 5. **Mixed Content**: Seamless blend of documentation and executable code
#
# ```
# Final message
success_message = "ðŸŽ‰ PyMD makes technical documentation beautiful and executable!"
print(f"**Success Message:** {success_message}")

# Show some final stats
print("### Document Stats")
print(f"- Data points analyzed: **{len(df)}**")
print(
    f"- Variables available: **{len([var for var in globals() if not var.startswith('_')])}**")
# ```
#
# That's PyMD in action! Try modifying the code blocks above and watch the results update in real-time with the live preview server.
#
# // This is a comment - it won't appear in the rendered output
# // Perfect for leaving notes during development!
#
#
#
