#!/usr/bin/env python3
"""
Test Python code execution functionality
"""

import unittest
from conftest import test_utils


class TestCodeExecution(unittest.TestCase):
    """Test Python code execution features"""
    
    def setUp(self):
        """Set up test environment"""
        self.renderer = test_utils.create_renderer()
    
    def test_simple_code_execution(self):
        """Test simple Python code execution in ``` blocks"""
        content = """
# Code Execution Test

```
x = 5
y = 10
print(f"Sum: {x + y}")
```
"""
        html = self.renderer.parse_and_render(content)
        output_file = test_utils.save_test_output(html, "test_simple_code")
        
        test_utils.assert_contains(html, '<h1>Code Execution Test</h1>')
        test_utils.assert_contains(html, 'Sum: 15')
        test_utils.assert_contains(html, '<pre class="code-output">')
        
        print(f"✅ Simple code execution test passed - output saved to {output_file}")
    
    def test_variable_persistence(self):
        """Test that variables persist across code blocks"""
        content = """
# Variable Persistence

```
a = 42
b = "hello"
```

```
print(f"a = {a}")
print(f"b = {b}")
```

```
c = a * 2
print(f"c = {c}")
```
"""
        html = self.renderer.parse_and_render(content)
        output_file = test_utils.save_test_output(html, "test_variable_persistence")
        
        test_utils.assert_contains(html, 'a = 42')
        test_utils.assert_contains(html, 'b = hello')
        test_utils.assert_contains(html, 'c = 84')
        
        print(f"✅ Variable persistence test passed - output saved to {output_file}")
    
    def test_multiline_code(self):
        """Test multi-line code structures"""
        content = """
# Multi-line Code

```
def greet(name):
    return f"Hello, {name}!"

for i in range(3):
    print(greet(f"User{i}"))
```
"""
        html = self.renderer.parse_and_render(content)
        output_file = test_utils.save_test_output(html, "test_multiline_code")
        
        test_utils.assert_contains(html, 'Hello, User0!')
        test_utils.assert_contains(html, 'Hello, User1!')
        test_utils.assert_contains(html, 'Hello, User2!')
        
        print(f"✅ Multi-line code test passed - output saved to {output_file}")
    
    def test_pymd_functions(self):
        """Test PyMD helper functions within code blocks"""
        content = """
# PyMD Functions

```
pymd.h2("Generated Header")
pymd.text("This text was generated by PyMD functions")
```
"""
        html = self.renderer.parse_and_render(content)
        output_file = test_utils.save_test_output(html, "test_pymd_functions")
        
        test_utils.assert_contains(html, '<h2>Generated Header</h2>')
        test_utils.assert_contains(html, '<p>This text was generated by PyMD functions</p>')
        
        print(f"✅ PyMD functions test passed - output saved to {output_file}")
    
    def test_code_with_strings(self):
        """Test code blocks with multi-line strings"""
        content = """
# Code with Strings

```
sample_code = '''def hello():
    print("Hello World!")
    return True'''

pymd.code(sample_code, "python")
print("Code block displayed above")
```
"""
        html = self.renderer.parse_and_render(content)
        output_file = test_utils.save_test_output(html, "test_code_with_strings")
        
        test_utils.assert_contains(html, '<pre><code class="language-python">')
        test_utils.assert_contains(html, 'def hello():')
        test_utils.assert_contains(html, 'Code block displayed above')
        
        print(f"✅ Code with strings test passed - output saved to {output_file}")


def run_code_execution_tests():
    """Run all code execution tests"""
    suite = unittest.TestLoader().loadTestsFromTestCase(TestCodeExecution)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    return result.wasSuccessful()


if __name__ == '__main__':
    success = run_code_execution_tests()
    if success:
        print("\n🎉 All code execution tests passed!")
    else:
        print("\n❌ Some code execution tests failed!")